<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20240610131113 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql('CREATE TABLE doctor_addresses (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, address_id VARCHAR(255) DEFAULT NULL, reg_date TIMESTAMP(0) WITHOUT TIME ZONE DEFAULT NULL, address_type_id INT DEFAULT NULL, doctor_info_id INT DEFAULT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE INDEX IDX_A0D814FDCE26A255 ON doctor_addresses (doctor_info_id)');
        $this->addSql('COMMENT ON COLUMN doctor_addresses.address_id IS \'Идентификатор адреса\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses.reg_date IS \'Дата регистрации\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses.address_type_id IS \'Справочник ФРНСИ «ФРМР. Тип адреса медицинского работника», OID 1.2.643.5.1.13.13.99.2.296\'');
        $this->addSql('CREATE TABLE doctor_addresses_reg (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, g_arguid VARCHAR(255) DEFAULT NULL, aoid_area VARCHAR(255) DEFAULT NULL, houseid VARCHAR(255) DEFAULT NULL, region VARCHAR(255) DEFAULT NULL, area_name VARCHAR(255) DEFAULT NULL, prefix_area VARCHAR(255) DEFAULT NULL, street_name VARCHAR(255) DEFAULT NULL, prefix_street VARCHAR(255) DEFAULT NULL, house VARCHAR(255) DEFAULT NULL, building VARCHAR(255) DEFAULT NULL, struct VARCHAR(255) DEFAULT NULL, flat VARCHAR(255) DEFAULT NULL, doctor_address_id INT DEFAULT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE UNIQUE INDEX UNIQ_DE173EE6C2A086E4 ON doctor_addresses_reg (doctor_address_id)');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.g_arguid IS \'Идентификатор объекта адреса по ГАР\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.aoid_area IS \'Идентификатор улицы по ГАР\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.houseid IS \'Идентификатор дома по ГАР\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.region IS \'Код региона (id)\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.area_name IS \'Наименование населенного пункта\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.prefix_area IS \'Префикс населенного пункта\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.street_name IS \'Наименование улицы\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.prefix_street IS \'Префикс улицы\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.house IS \'Номер дома\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.building IS \'Номер корпуса\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.struct IS \'Номер строения\'');
        $this->addSql('COMMENT ON COLUMN doctor_addresses_reg.flat IS \'Номер квартиры\'');
        $this->addSql('CREATE TABLE doctor_citizen_ship_id (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, code INT DEFAULT NULL, name VARCHAR(255) DEFAULT NULL, doctor_info_id INT DEFAULT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE UNIQUE INDEX UNIQ_BD417756CE26A255 ON doctor_citizen_ship_id (doctor_info_id)');
        $this->addSql('COMMENT ON COLUMN doctor_citizen_ship_id.code IS \'Гражданство (id) Справочник ФРНСИ «Категории гражданства», OID 1.2.643.5.1.13.13.99.2.315\'');
        $this->addSql('COMMENT ON COLUMN doctor_citizen_ship_id.name IS \'Наименование\'');
        $this->addSql('CREATE TABLE doctor_document (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, serial VARCHAR(255) DEFAULT NULL, number VARCHAR(255) DEFAULT NULL, pass_date TIMESTAMP(0) WITHOUT TIME ZONE DEFAULT NULL, pass_org VARCHAR(255) DEFAULT NULL, code_org VARCHAR(255) DEFAULT NULL, document_id VARCHAR(255) DEFAULT NULL, doctor_info_id INT DEFAULT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE INDEX IDX_709DF840CE26A255 ON doctor_document (doctor_info_id)');
        $this->addSql('COMMENT ON COLUMN doctor_document.serial IS \'Серия документа, удостоверяющего личность\'');
        $this->addSql('COMMENT ON COLUMN doctor_document.number IS \'Номер документа, удостоверяющего личность\'');
        $this->addSql('COMMENT ON COLUMN doctor_document.pass_date IS \'Дата выдачи документа, удостоверяющего личность\'');
        $this->addSql('COMMENT ON COLUMN doctor_document.pass_org IS \'Организация выдачи документа, удостоверяющего личность\'');
        $this->addSql('COMMENT ON COLUMN doctor_document.code_org IS \'Код подразделения\'');
        $this->addSql('COMMENT ON COLUMN doctor_document.document_id IS \'Код документа, удостоверяющего личность\'');
        $this->addSql('CREATE TABLE doctor_info (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, mr BOOLEAN DEFAULT false NOT NULL, student BOOLEAN DEFAULT false NOT NULL, is_medical_worker BOOLEAN DEFAULT false NOT NULL, is_pharm_worker BOOLEAN DEFAULT false NOT NULL, oid VARCHAR(255) DEFAULT NULL, last_name VARCHAR(255) DEFAULT NULL, first_name VARCHAR(255) DEFAULT NULL, patronymic VARCHAR(255) DEFAULT NULL, gender VARCHAR(255) DEFAULT NULL, birth_date TIMESTAMP(0) WITHOUT TIME ZONE DEFAULT NULL, snils VARCHAR(255) DEFAULT NULL, inn VARCHAR(255) DEFAULT NULL, military_relation_id INT DEFAULT NULL, phone VARCHAR(255) DEFAULT NULL, email VARCHAR(255) DEFAULT NULL, is_disabled VARCHAR(255) DEFAULT NULL, disabled_group_id VARCHAR(255) DEFAULT NULL, disabled_group_name VARCHAR(255) DEFAULT NULL, disabled_date TIMESTAMP(0) WITHOUT TIME ZONE DEFAULT NULL, covid19 VARCHAR(255) DEFAULT NULL, PRIMARY KEY(id))');
        $this->addSql('COMMENT ON COLUMN doctor_info.mr IS \'Признак наличия работника в ФРМР (это и медицинские и фармацевтические работники)\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.student IS \'Признак обучающегося\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.is_medical_worker IS \'Признак медицинского работника - работники, которые трудоустроены на медицинских должностях в организации, имеющей лицензию на медицинскую деятельность, которые в тоже время имеют действующую аккредитацию/сертификат специалиста по медицинским специальностям\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.is_pharm_worker IS \'Признак фармацевтического работника - работники, которые трудоустроены на фармацевтических должностях в организации, имеющей лицензию на фармацевтическую деятельность, которые в тоже время имеют действующую аккредитацию/сертификат специалиста по фармацевтическим специальностям\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.oid IS \'OID работника\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.last_name IS \'Фамилия\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.first_name IS \'Имя\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.patronymic IS \'Отчество\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.gender IS \'Пол (1 - мужской, 2 - женский)\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.birth_date IS \'Дата рождения\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.snils IS \'СНИЛС сотрудника\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.inn IS \'ИНН сотрудника\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.military_relation_id IS \'Отношение к военной службе\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.phone IS \'Номер телефона (+7)\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.email IS \'Адрес электронной почты\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.is_disabled IS \'Данные о наличии инвалидности\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.disabled_group_id IS \'Группа инвалидности (Код)\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.disabled_group_name IS \'Группа инвалидности (Наименование)\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.disabled_date IS \'Дата начала инвалидности\'');
        $this->addSql('COMMENT ON COLUMN doctor_info.covid19 IS \'Идентификатор определяющий, что МР может быть дополнительно привлечен к оказанию медицинской помощи при угрозе распространения заболеваний, представляющих опасность для окружающих\'');
        $this->addSql('CREATE TABLE doctor_oksm_id (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, code INT DEFAULT NULL, name VARCHAR(255) DEFAULT NULL, doctor_info_id INT DEFAULT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE UNIQUE INDEX UNIQ_FF32D6A5CE26A255 ON doctor_oksm_id (doctor_info_id)');
        $this->addSql('COMMENT ON COLUMN doctor_oksm_id.code IS \'Код\'');
        $this->addSql('COMMENT ON COLUMN doctor_oksm_id.name IS \'Наименование\'');
        $this->addSql('ALTER TABLE doctor_addresses ADD CONSTRAINT FK_A0D814FDCE26A255 FOREIGN KEY (doctor_info_id) REFERENCES doctor_info (id) NOT DEFERRABLE INITIALLY IMMEDIATE');
        $this->addSql('ALTER TABLE doctor_addresses_reg ADD CONSTRAINT FK_DE173EE6C2A086E4 FOREIGN KEY (doctor_address_id) REFERENCES doctor_addresses (id) NOT DEFERRABLE INITIALLY IMMEDIATE');
        $this->addSql('ALTER TABLE doctor_citizen_ship_id ADD CONSTRAINT FK_BD417756CE26A255 FOREIGN KEY (doctor_info_id) REFERENCES doctor_info (id) NOT DEFERRABLE INITIALLY IMMEDIATE');
        $this->addSql('ALTER TABLE doctor_document ADD CONSTRAINT FK_709DF840CE26A255 FOREIGN KEY (doctor_info_id) REFERENCES doctor_info (id) NOT DEFERRABLE INITIALLY IMMEDIATE');
        $this->addSql('ALTER TABLE doctor_oksm_id ADD CONSTRAINT FK_FF32D6A5CE26A255 FOREIGN KEY (doctor_info_id) REFERENCES doctor_info (id) NOT DEFERRABLE INITIALLY IMMEDIATE');

        $this->addDoctorInfo();
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql('CREATE SCHEMA public');
        $this->addSql('ALTER TABLE doctor_addresses DROP CONSTRAINT FK_A0D814FDCE26A255');
        $this->addSql('ALTER TABLE doctor_addresses_reg DROP CONSTRAINT FK_DE173EE6C2A086E4');
        $this->addSql('ALTER TABLE doctor_citizen_ship_id DROP CONSTRAINT FK_BD417756CE26A255');
        $this->addSql('ALTER TABLE doctor_document DROP CONSTRAINT FK_709DF840CE26A255');
        $this->addSql('ALTER TABLE doctor_oksm_id DROP CONSTRAINT FK_FF32D6A5CE26A255');
        $this->addSql('DROP TABLE doctor_addresses');
        $this->addSql('DROP TABLE doctor_addresses_reg');
        $this->addSql('DROP TABLE doctor_citizen_ship_id');
        $this->addSql('DROP TABLE doctor_document');
        $this->addSql('DROP TABLE doctor_info');
        $this->addSql('DROP TABLE doctor_oksm_id');


    }

    private function addDoctorInfo()
    {
        for ($i = 0; $i <= 313; $i++) {
            $doctorinfo = [];
            $doctorinfo["mr"] = true;
            $doctorinfo["student"] = 0;
            $doctorinfo["isMedicalWorker"] = true;
            $doctorinfo["isPharmWorker"] = 0;
            $doctorinfo["oid"] = $this->getDoctorUid();
            $doctorinfo["lastName"] = $this->getFam();
            $doctorinfo["firstName"] = $this->getName();
            $doctorinfo["patronymic"] = $this->getOtchestvo();
            $doctorinfo["gender"] = 2;
            $doctorinfo["birthDate"] = $this->getBirthdate();
            $doctorinfo["snils"] = $this->getSnils();
            $doctorinfo["inn"] = $this->getInn();
            $doctorinfo["citizenShipId"] = [
                "code" => 1,
                "name" => "Гражданин РФ"
            ];
            $doctorinfo["oksmId"] = [
                "code" => 1,
                "name" => "string"
            ];
            $doctorinfo["militaryRelationId"] = 2;
            $doctorinfo["phone"] = $this->getPhone();
            $doctorinfo["email"] = $this->getEmail($doctorinfo["lastName"], $doctorinfo["firstName"]);
            $doctorinfo["isDisabled"] = true;
            $doctorinfo["disabledGroupId"] = 1;
            $doctorinfo["disabledGroupName"] = "I";
            $doctorinfo["disabledDate"] = $this->getBirthdate();
            $doctorinfo["covid19"] = 0;
            $doctorinfo["documents"] = [
                [
                    "serial" => $this->getSerialDoc(),
                    "number" => $this->getSerialNum(),
                    "passDate" => $this->getBirthdate(),
                    "passOrg" => "УФМС г. Москвы",
                    "codeOrg" => $this->getCodeOrg(),
                    "documentId" => 1
                ]
            ];
            $doctorinfo["addresses"] = [
                [
                    "addressId" => $this->generateGuid(),
                    "regDate" => $this->getBirthdate(),
                    "addressTypeId" => 1,
                    "address" => [
                        "GARguid" => $this->generateGuid(),
                        "aoidArea" => $this->generateGuid(),
                        "aoidStreet" => $this->generateGuid(),
                        "houseid" => $this->generateGuid(),
                        "region" => 77,
                        "areaName" => "Москва",
                        "prefixArea" => "г",
                        "streetName" => $this->getStreet(),
                        "prefixStreet" => "ул",
                        "house" => $this->getHouse(),
                        "building" => $this->getHouse(),
                        "struct" => $this->getHouse(),
                        "flat" => $this->getHouse()
                    ]
                ]
            ];

            $this->addSql("insert into doctor_info (mr, student, is_medical_worker, is_pharm_worker, oid, last_name, first_name, patronymic,
                         gender, birth_date, snils, inn, military_relation_id, phone, email, is_disabled,
                         disabled_group_id, disabled_group_name, disabled_date, covid19)
                    values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", [
                $doctorinfo["mr"],
                $doctorinfo["student"],
                $doctorinfo["isMedicalWorker"],
                $doctorinfo["isPharmWorker"],
                $doctorinfo["oid"],
                $doctorinfo["lastName"],
                $doctorinfo["firstName"],
                $doctorinfo["patronymic"],
                $doctorinfo["gender"],
                $doctorinfo["birthDate"],
                $doctorinfo["snils"],
                $doctorinfo["inn"],
                $doctorinfo["militaryRelationId"],
                $doctorinfo["phone"],
                $doctorinfo["email"],
                $doctorinfo["isDisabled"],
                $doctorinfo["disabledGroupId"],
                $doctorinfo["disabledGroupName"],
                $doctorinfo["disabledDate"],
                $doctorinfo["covid19"]
            ]);

            $this->addSql("insert into doctor_citizen_ship_id (code, name, doctor_info_id)
                                values (?, ?, (SELECT id FROM doctor_info WHERE oid = ?))", [
                $doctorinfo["citizenShipId"]["code"],
                $doctorinfo["citizenShipId"]["name"],
                $doctorinfo["oid"]
            ]);

            $this->addSql("insert into doctor_oksm_id ( code, name, doctor_info_id)
                                values (?, ?, (SELECT id FROM doctor_info WHERE oid = ?))", [
                $doctorinfo["oksmId"]["code"],
                $doctorinfo["oksmId"]["name"],
                $doctorinfo["oid"]
            ]);

            $this->addSql("insert into doctor_document (serial, number, pass_date, pass_org, code_org, document_id, doctor_info_id)
                                values (?,?,?,?,?,?, (SELECT id FROM doctor_info WHERE oid = ?))", [
                $doctorinfo["documents"][0]["serial"],
                $doctorinfo["documents"][0]["number"],
                $doctorinfo["documents"][0]["passDate"],
                $doctorinfo["documents"][0]["passOrg"],
                $doctorinfo["documents"][0]["codeOrg"],
                $doctorinfo["documents"][0]["documentId"],
                $doctorinfo["oid"]
            ]);

            $this->addSql("insert into doctor_addresses (address_id, reg_date, address_type_id, doctor_info_id)
                                values (?,?,?, (SELECT id FROM doctor_info WHERE oid = ?))", [
                $doctorinfo["addresses"][0]["addressId"],
                $doctorinfo["addresses"][0]["regDate"],
                $doctorinfo["addresses"][0]["addressTypeId"],
                $doctorinfo["oid"]
            ]);

            $this->addSql("insert into doctor_addresses_reg (g_arguid, aoid_area, houseid, region, area_name, prefix_area, street_name,
                                  prefix_street, house, building, struct, flat, doctor_address_id)
                                values (?,?,?,?,?,?,?,?,?,?,?,?, (SELECT id FROM doctor_addresses WHERE address_id = ?))",
                [
                    $doctorinfo["addresses"][0]["address"]["GARguid"],
                    $doctorinfo["addresses"][0]["address"]["aoidArea"],
                    $doctorinfo["addresses"][0]["address"]["houseid"],
                    $doctorinfo["addresses"][0]["address"]["region"],
                    $doctorinfo["addresses"][0]["address"]["areaName"],
                    $doctorinfo["addresses"][0]["address"]["prefixArea"],
                    $doctorinfo["addresses"][0]["address"]["streetName"],
                    $doctorinfo["addresses"][0]["address"]["prefixStreet"],
                    $doctorinfo["addresses"][0]["address"]["house"],
                    $doctorinfo["addresses"][0]["address"]["building"],
                    $doctorinfo["addresses"][0]["address"]["struct"],
                    $doctorinfo["addresses"][0]["address"]["flat"],
                    $doctorinfo["addresses"][0]["addressId"]
                ]);

        }
    }

    private function getDoctorUid()
    {
        return "2022." . rand(1000000, 9999999);
    }

    private function getName()
    {
        $names = ["Анастасия",
            "Анна",
            "Мария",
            "Елена",
            "Дарья",
            "Алина",
            "Ирина",
            "Екатерина",
            "Арина",
            "Полина",
            "Ольга",
            "Юлия",
            "Татьяна",
            "Наталья",
            "Виктория",
            "Елизавета",
            "Ксения",
            "Милана",
            "Вероника",
            "Алиса",
            "Валерия",
            "Александра",
            "Ульяна",
            "Кристина",
            "София",
            "Марина",
            "Светлана",
            "Варвара",
            "Софья",
            "Диана",
            "Яна",
            "Кира",
            "Ангелина",
            "Маргарита",
            "Ева",
            "Алёна",
            "Дарина",
            "Карина",
            "Василиса",
            "Олеся",
            "Аделина",
            "Оксана",
            "Таисия",
            "Надежда",
            "Евгения",
            "Элина",
            "Злата",
            "Есения",
            "Милена",
            "Вера",
            "Мирослава",
            "Галина",
            "Людмила",
            "Валентина",
            "Нина",
            "Эмилия",
            "Камилла",
            "Альбина",
            "Лилия",
            "Любовь",
            "Лариса",
            "Эвелина",
            "Инна",
            "Агата",
            "Амелия",
            "Амина",
            "Эльвира",
            "Ярослава",
            "Стефания",
            "Регина",
            "Алла",
            "Виолетта",
            "Лидия",
            "Амалия",
            "Наталия",
            "Марьяна",
            "Анжелика",
            "Нелли",
            "Влада",
            "Виталина",
            "Майя",
            "Тамара",
            "Мелания",
            "Лиана",
            "Василина",
            "Зарина",
            "Алия",
            "Владислава",
            "Самира",
            "Антонина",
            "Ника",
            "Мадина",
            "Наташа",
            "Каролина",
            "Снежана",
            "Юлиана",
            "Ариана",
            "Эльмира",
            "Ясмина",
            "Жанна"];

        $randomIndex = array_rand($names);
        $randomElement = $names[$randomIndex];

        return $randomElement;
    }

    private function getOtchestvo()
    {
        $otchestvo = ["Александровна",
            "Алексеевна",
            "Анатольевна",
            "Андреевна",
            "Антоновна",
            "Аркадьевна",
            "Борисовна",
            "Валентиновна",
            "Валериевна",
            "Васильевна",
            "Викторовна",
            "Владимировна",
            "Владиславовна",
            "Геннадиевна",
            "Георгиевна",
            "Григорьевна",
            "Даниловна",
            "Дмитриевна",
            "Евгеньевна",
            "Егоровна",
            "Ивановна",
            "Игоревна",
            "Ильинична",
            "Кирилловна",
            "Константиновна",
            "Леонидовна",
            "Львовна",
            "Максимовна",
            "Михайловна",
            "Николаевна",
            "Олеговна",
            "Павловна",
            "Петровна",
            "Романовна",
            "Семеновна",
            "Сергеевна",
            "Станиславовна",
            "Степановна",
            "Федоровна",
            "Филипповна",
            "Эдуардовна",
            "Юрьевна"];
        $randomIndex = array_rand($otchestvo);
        $randomElement = $otchestvo[$randomIndex];

        return $randomElement;
    }

    private function getFam()
    {
        $fams = ["Травникова", "Смирнова", "Генералова", "Игнатова", "Краснова", "Белова", "Маслова", "Марченко", "Карпова", "Поднебесная", "Кольцова", "Морозова", "Демидова", "Рубенцова", "Макарова", "Иванова", "Новак", "Максимчук", "Потапова", "Меньшова", "Тимошенко", "Малиновская", "Абрамова", "Кручинина", "Дарова", "Власова", "Ильина", "Маркова", "Островская", "Мищенко", "Васнецова", "Ларина", "Добровольская", "Сафарова", "Тимофеева", "Куликовская", "Преображенская", "Коновалова", "Руденко", "Волощук", "Шведова", "Коваль", "Анисимова", "Никитина", "Преснякова", "Владова", "Прохорова", "Орловская", "Химченко", "Аркадьева", "Галактионова", "Федорова", "Фролова", "Третьякова", "Николаева", "Софийская", "Соболева", "Кузнецова", "Чайковская", "Зайцева", "Аверина", "Князева", "Меркулова", "Чернышова"];
        $randomIndex = array_rand($fams);
        $randomElement = $fams[$randomIndex];

        return $randomElement;
    }

    private function getBirthdate()
    {
        return rand(1970, 1996) . "-" . rand(1, 12) . "-" . rand(1, 28) . "T00:00:00.0000000Z";
    }

    private function getSnils()
    {
        return rand(79999999901, 9999999999999);
    }

    private function getInn()
    {
        return rand(500100732259, 200100732259);
    }

    private function getPhone()
    {
        return rand(9129290925, 9999290925);
    }

    private function getSerialDoc()
    {
        return rand(1000, 9999);
    }

    private function getSerialNum()
    {
        return rand(156987, 956987);
    }

    private function getDocDate($minDate)
    {
        return rand($minDate + 18, 1996) . "-" . rand(1, 12) . "-" . rand(1, 28) . "T00:00:00.0000000Z";
    }

    private function getCodeOrg()
    {
        return rand(100, 500) . "-" . rand(100, 500);

    }

    private function getStreet()
    {
        $street = ["Бронная",
            "Бутовская",
            "Грузинская",
            "Декабрьская",
            "Дмитровка",
            "Дорогомиловская",
            "Екатерининская",
            "Калитниковская",
            "Косинская",
            "Лубянка",
            "Марфинская",
            "Марьинская",
            "Молчановка",
            "Набережная",
            "Никитская",
            "Новодмитровская",
            "Оленья",
            "Ордынка",
            "Остроумовская",
            "Очаковская",
            "Переяславская",
            "Пионерская",
            "Пироговская",
            "Полянка",
            "Почтовая",
            "Садовая",
            "Семёновская",
            "Серпуховская",
            "Спасская",
            "Сухаревская площадь",
            "Татарская",
            "Тихоновская",
            "Тульская",
            "Филёвская",
            "Черёмушкинская",
            "Черкизовская",
            "Ширяевская",
            "Юшуньская",
            "Якиманка",
            "Большие Каменщики"
        ];

        $randomIndex = array_rand($street);
        $randomElement = $street[$randomIndex];

        return $randomElement;
    }

    private function getHouse()
    {
        return rand(1, 200);
    }

    private function getEmail($fam, $im)
    {
        $converter = array(
            'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e',
            'ё' => 'e', 'ж' => 'zh', 'з' => 'z', 'и' => 'i', 'й' => 'y', 'к' => 'k',
            'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r',
            'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'c',
            'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sch', 'ь' => '\'', 'ы' => 'y', 'ъ' => '\'',
            'э' => 'e', 'ю' => 'yu', 'я' => 'ya',

            'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'G', 'Д' => 'D', 'Е' => 'E',
            'Ё' => 'E', 'Ж' => 'Zh', 'З' => 'Z', 'И' => 'I', 'Й' => 'Y', 'К' => 'K',
            'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 'П' => 'P', 'Р' => 'R',
            'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'H', 'Ц' => 'C',
            'Ч' => 'Ch', 'Ш' => 'Sh', 'Щ' => 'Sch', 'Ь' => '\'', 'Ы' => 'Y', 'Ъ' => '\'',
            'Э' => 'E', 'Ю' => 'Yu', 'Я' => 'Ya',
        );

        $name = strtr($fam . $im, $converter);

        $mailService = [
            "@gmail.com",
            "@ya.ru",
            "@yandex.ru",
            "@mail.ru",
            "@lookpost.tu"
        ];

        $randomIndex = array_rand($mailService);
        $randomElement = $mailService[$randomIndex];

        return $name . $randomElement;
    }

    function generateGuid()
    {
        $characters = 'abcdef0123456789';
        $guid = '';

        for ($i = 0; $i < 8; $i++) {
            $guid .= $characters[rand(0, 15)];
        }

        $guid .= '-';

        for ($i = 0; $i < 4; $i++) {
            $guid .= $characters[rand(0, 15)];
        }

        $guid .= '-';

        for ($i = 0; $i < 4; $i++) {
            $guid .= $characters[rand(0, 15)];
        }

        $guid .= '-';

        for ($i = 0; $i < 4; $i++) {
            $guid .= $characters[rand(0, 15)];
        }

        $guid .= '-';

        for ($i = 0; $i < 12; $i++) {
            $guid .= $characters[rand(0, 15)];
        }

        return $guid;
    }

}
