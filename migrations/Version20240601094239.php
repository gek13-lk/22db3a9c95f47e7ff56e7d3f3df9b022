<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20240601094239 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql('CREATE TABLE competencies (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, modality VARCHAR(255) DEFAULT NULL, modality_eng VARCHAR(255) DEFAULT NULL, type VARCHAR(255) DEFAULT NULL, type_eng VARCHAR(255) DEFAULT NULL, duration INT DEFAULT NULL, norms INT DEFAULT NULL, PRIMARY KEY(id))');
        $this->addSql('COMMENT ON COLUMN competencies.modality IS \'Модальность\'');
        $this->addSql('COMMENT ON COLUMN competencies.modality_eng IS \'Модальность (ENG)\'');
        $this->addSql('COMMENT ON COLUMN competencies.type IS \'Вид исследования\'');
        $this->addSql('COMMENT ON COLUMN competencies.type_eng IS \'Вид исследования (ENG)\'');
        $this->addSql('COMMENT ON COLUMN competencies.duration IS \'Средняя длительность (по верхней границе) по регламентам в РФ в минутах\'');
        $this->addSql('COMMENT ON COLUMN competencies.norms IS \'Нормы количества описанных исследований на одного врача в смену\'');
        $this->addSql('CREATE TABLE doctor (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, surname VARCHAR(255) DEFAULT NULL, firstname VARCHAR(255) DEFAULT NULL, middlename VARCHAR(255) DEFAULT NULL, PRIMARY KEY(id))');
        $this->addSql('COMMENT ON COLUMN doctor.surname IS \'Фамилия\'');
        $this->addSql('COMMENT ON COLUMN doctor.firstname IS \'Имя\'');
        $this->addSql('COMMENT ON COLUMN doctor.middlename IS \'Отчество\'');
        $this->addSql('CREATE TABLE doctor_competencies (doctor_id INT NOT NULL, competencies_id INT NOT NULL, PRIMARY KEY(doctor_id, competencies_id))');
        $this->addSql('CREATE INDEX IDX_5863585887F4FB17 ON doctor_competencies (doctor_id)');
        $this->addSql('CREATE INDEX IDX_586358581A05A60B ON doctor_competencies (competencies_id)');
        $this->addSql('CREATE TABLE doctor_work_schedules (id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, start_time TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, end_time TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, day_of_week VARCHAR(20) NOT NULL, doctor_id INT DEFAULT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE INDEX IDX_DC6DAEEC87F4FB17 ON doctor_work_schedules (doctor_id)');
        $this->addSql('ALTER TABLE doctor_competencies ADD CONSTRAINT FK_5863585887F4FB17 FOREIGN KEY (doctor_id) REFERENCES doctor (id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE');
        $this->addSql('ALTER TABLE doctor_competencies ADD CONSTRAINT FK_586358581A05A60B FOREIGN KEY (competencies_id) REFERENCES competencies (id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE');
        $this->addSql('ALTER TABLE doctor_work_schedules ADD CONSTRAINT FK_DC6DAEEC87F4FB17 FOREIGN KEY (doctor_id) REFERENCES doctor (id) NOT DEFERRABLE INITIALLY IMMEDIATE');
        $this->addCompetenciesRef();
        $this->addDoctors();
        $this->addDoctorCompetencies();
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql('CREATE SCHEMA public');
        $this->addSql('ALTER TABLE doctor_competencies DROP CONSTRAINT FK_5863585887F4FB17');
        $this->addSql('ALTER TABLE doctor_competencies DROP CONSTRAINT FK_586358581A05A60B');
        $this->addSql('ALTER TABLE doctor_work_schedules DROP CONSTRAINT FK_DC6DAEEC87F4FB17');
        $this->addSql('DROP TABLE competencies');
        $this->addSql('DROP TABLE doctor');
        $this->addSql('DROP TABLE doctor_competencies');
        $this->addSql('DROP TABLE doctor_work_schedules');
    }

    private function addCompetenciesRef(): void
    {
        $data = [
            ['modality' => 'Рентгенография', 'modality_eng' => 'X-ray', 'type' => 'Грудная клетка', 'type_eng' => 'Chest X-ray', 'duration' => 15],
            ['modality' => 'Рентгенография', 'modality_eng' => 'X-ray', 'type' => 'Абдоминальная рентгенография', 'type_eng' => 'Abdominal X-ray', 'duration' => 20],
            ['modality' => 'Рентгенография', 'modality_eng' => 'X-ray', 'type' => 'Костная рентгенография', 'type_eng' => 'Bone X-ray', 'duration' => 20],
            ['modality' => 'Рентгенография', 'modality_eng' => 'X-ray', 'type' => 'Синусовая рентгенография', 'type_eng' => 'Sinus X-ray', 'duration' => 15],
            ['modality' => 'Компьютерная томография', 'modality_eng' => 'CT', 'type' => 'КТ головного мозга', 'type_eng' => 'Brain CT', 'duration' => 45],
            ['modality' => 'Компьютерная томография', 'modality_eng' => 'CT', 'type' => 'КТ грудной клетки', 'type_eng' => 'Chest CT', 'duration' => 45],
            ['modality' => 'Компьютерная томография', 'modality_eng' => 'CT', 'type' => 'КТ брюшной полости', 'type_eng' => 'Abdominal CT', 'duration' => 60],
            ['modality' => 'Компьютерная томография', 'modality_eng' => 'CT', 'type' => 'КТ ангиография', 'type_eng' => 'CT Angiography (CTA)', 'duration' => 90],
            ['modality' => 'Флюороскопия', 'modality_eng' => 'Fluoro', 'type' => 'Гастроскопия', 'type_eng' => 'Gastrofluoroscopy', 'duration' => 60],
            ['modality' => 'Флюороскопия', 'modality_eng' => 'Fluoro', 'type' => 'Колоноскопия', 'type_eng' => 'Colon Fluoroscopy', 'duration' => 90],
            ['modality' => 'Флюороскопия', 'modality_eng' => 'Fluoro', 'type' => 'Ангиография', 'type_eng' => 'Angio Fluoroscopy', 'duration' => 120],
            ['modality' => 'Флюороскопия', 'modality_eng' => 'Fluoro', 'type' => 'Бронхоскопия', 'type_eng' => 'Bronchofluoroscopy', 'duration' => 60],
            ['modality' => 'Маммография', 'modality_eng' => 'MG', 'type' => 'Скрининговая маммография', 'type_eng' => 'Screening Mammography', 'duration' => 30],
            ['modality' => 'Маммография', 'modality_eng' => 'MG', 'type' => 'Диагностическая маммография', 'type_eng' => 'Diagnostic Mammography', 'duration' => 45],
            ['modality' => 'Ангиография', 'modality_eng' => 'Angio', 'type' => 'Коронарная ангиография', 'type_eng' => 'Coronary Angiography', 'duration' => 120],
            ['modality' => 'Ангиография', 'modality_eng' => 'Angio', 'type' => 'Церебральная ангиография', 'type_eng' => 'Cerebral Angiography', 'duration' => 120],
            ['modality' => 'Ангиография', 'modality_eng' => 'Angio', 'type' => 'Периферическая ангиография', 'type_eng' => 'Peripheral Angiography', 'duration' => 120],
            ['modality' => 'Ангиография', 'modality_eng' => 'Angio', 'type' => 'Легочная ангиография', 'type_eng' => 'Pulmonary Angiography', 'duration' => 120],
            ['modality' => 'Дентальная рентгенография', 'modality_eng' => 'Dental X-ray', 'type' => 'Интраоральная рентгенография', 'type_eng' => 'Intraoral X-ray', 'duration' => 15],
            ['modality' => 'Дентальная рентгенография', 'modality_eng' => 'Dental X-ray', 'type' => 'Панорамная рентгенография', 'type_eng' => 'Panoramic X-ray', 'duration' => 20],
            ['modality' => 'Дентальная рентгенография', 'modality_eng' => 'Dental X-ray', 'type' => 'Цефалометрическая рентгенография', 'type_eng' => 'Cephalometric X-ray', 'duration' => 20],
            ['modality' => 'Остеоденситометрия', 'modality_eng' => 'DEXA', 'type' => 'Исследование поясничного отдела позвоночника', 'type_eng' => 'Lumbar Spine DEXA', 'duration' => 30],
            ['modality' => 'Остеоденситометрия', 'modality_eng' => 'DEXA', 'type' => 'Исследование бедренной кости', 'type_eng' => 'Hip DEXA', 'duration' => 30],
            ['modality' => 'Остеоденситометрия', 'modality_eng' => 'DEXA', 'type' => 'Полное обследование тела', 'type_eng' => 'Whole Body DEXA', 'duration' => 40],
        ];

        foreach ($data as $row) {
            $this->addSql('INSERT INTO competencies (modality, modality_eng, type, type_eng, duration, norms) VALUES (?, ?, ?, ?, ?, ?)', [
                $row['modality'],
                $row['modality_eng'],
                $row['type'],
                $row['type_eng'],
                $row['duration'],
                $row['norms'] ?? null
            ]);
        }
    }

    private function addDoctors(): void
    {
        $data = [
            ['surname' => 'Грызлов', 'firstname' => 'Иван', 'middlename' => 'Демидович'],
            ['surname' => 'Хомяков', 'firstname' => 'Александр', 'middlename' => 'Николаевич'],
            ['surname' => 'Пипич', 'firstname' => 'Михаил'],
            ['surname' => 'Юринский', 'firstname' => 'Юрий', 'middlename' => 'Демидович'],
            ['surname' => 'Алябина', 'firstname' => 'Александра'],
            ];

        foreach ($data as $row) {
            $this->addSql('INSERT INTO doctor (surname, firstname, middlename) VALUES (?, ?, ?)', [
                $row['surname'] ?? null,
                $row['firstname'] ?? null,
                $row['middlename'] ?? null,
            ]);
        }
    }

    private function addDoctorCompetencies(): void
    {
        $doctorsCount = 5;

        $competenciesCount = 23;

        for ($j = 1; $j <= $doctorsCount; $j++) {
            $doctorCompetenciesCount = rand(1, $competenciesCount);

            $competenciesToAdd = [];

            for ($i = 1; $i <= $doctorCompetenciesCount; $i++) {
                $competencyToAdd = rand(1, $competenciesCount);

                if (in_array($competencyToAdd, $competenciesToAdd)) {
                    continue;
                }

                $competenciesToAdd[] = $competencyToAdd;
            }

            foreach ($competenciesToAdd as $competencyToAdd) {
                $this->addSql('INSERT INTO doctor_competencies (doctor_id, competencies_id) VALUES (?, ?)', [
                    $j,
                    $competencyToAdd,
                ]);
            }
        }
    }

    //TODO: нормы выхода врача в смену (день-ночь, 2 выходных, сутки через трое и т. д.) ??? как это отобразить ??
    private function createDoctorWorkSchedule(): void
    {
        //'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
        $data = [
            ['doctor_id' => 1, 'start_time' => '2024-06-01 08:00:00', 'end_time' => '2024-06-01 16:00:00', 'day_of_week' => 'Monday'],
            ['doctor_id' => 1, 'start_time' => '2024-06-02 08:00:00', 'end_time' => '2024-06-01 16:00:00', 'day_of_week' => 'Tuesday'],
            ['doctor_id' => 1, 'start_time' => '2024-06-05 08:00:00', 'end_time' => '2024-06-01 16:00:00', 'day_of_week' => 'Friday'],
            ['doctor_id' => 1, 'start_time' => '2024-06-06 08:00:00', 'end_time' => '2024-06-01 16:00:00', 'day_of_week' => 'Saturday'],
            ['doctor_id' => 2, 'start_time' => '2024-06-01 16:00:00', 'end_time' => '2024-06-01 22:00:00', 'day_of_week' => 'Saturday'],
            ['doctor_id' => 2, 'start_time' => '2024-06-02 16:00:00', 'end_time' => '2024-06-01 22:00:00', 'day_of_week' => 'Saturday'],
            ['doctor_id' => 2, 'start_time' => '2024-06-05 16:00:00', 'end_time' => '2024-06-01 22:00:00', 'day_of_week' => 'Saturday'],
            ['doctor_id' => 2, 'start_time' => '2024-06-06 16:00:00', 'end_time' => '2024-06-01 22:00:00', 'day_of_week' => 'Saturday'],
            ['doctor_id' => 3, 'start_time' => '2024-06-03 10:00:00', 'end_time' => '2024-06-01 16:00:00', 'day_of_week' => 'Saturday'],
            ['doctor_id' => 3, 'start_time' => '2024-06-04 10:00:00', 'end_time' => '2024-06-01 16:00:00', 'day_of_week' => 'Saturday'],
            ['doctor_id' => 3, 'start_time' => '2024-06-04 10:00:00', 'end_time' => '2024-06-01 16:00:00', 'day_of_week' => 'Saturday'],
            ['doctor_id' => 3, 'start_time' => '2024-06-04 10:00:00', 'end_time' => '2024-06-01 16:00:00', 'day_of_week' => 'Saturday'],
        ];

        foreach ($data as $row) {
            $this->addSql('INSERT INTO doctor_work_schedule (surname, firstname, middlename) VALUES (?, ?, ?)', [
                $row['surname'] ?? null,
                $row['firstname'] ?? null,
                $row['middlename'] ?? null,
            ]);
        }
    }
}
